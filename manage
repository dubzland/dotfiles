#!/usr/bin/env bash

progname=$(basename "$0")

dotfiles_dir="$(realpath "${dotfiles_dir:-${BASH_SOURCE[0]%/*}}")"
modules_dir="${modules_dir:-${dotfiles_dir}/modules}"
flavors_dir="${flavors_dir:-${dotfiles_dir}/flavors}"
target_dir="${TARGET_DIR:-$HOME}"
install_flavor=""
action=""
verbose=0

declare -a modules
modules=()

die() {
	rc=$1
	shift
	printf "$@\n" >&2
	exit $rc
}

log() {
	if [[ $verbose -gt 0 ]]; then
		printf "$@"
	fi
}

usage() {
	printf "Commands:\n"
	printf "  %s install     Install dotfiles\n" "$PROGNAME"
	printf "  %s uninstall   Uninstall dotfiles\n" "$PROGNAME"
	printf "\n"
	printf "Global options:\n"
	printf "  -f <flavor>     Flavor to install\n"
	printf "  -h              Display this help\n"
	printf "  -t <dir>        Target directory (defaults to \$HOME)\n"
	printf "  -v              Enable verbose output\n"
	printf "\n"
}

process_args() {
	while getopts ":f:t:hv" opt; do
		case $opt in 
			h)
				usage
				exit 0
				;;
			f)
				install_flavor="${OPTARG}"
				;;
			v)
				verbose=$((verbose+1))
				;;
			t)
				target_dir="${OPTARG}"
				;;
			:)
				die 2 "Option -${OPTARG} requires an argument."
				;;
			?)
				die 2 "Invalid option: -${OPTARG}."
				;;
		esac
	done

	shift $((OPTIND-1))

	# Ensure we have a subcommand to process before proceeding
	if [[ $# -eq 0 ]]; then
		printf "A subcommand is required.\n"
		usage
		exit 2
	fi

	action="$1"; shift
}

initialize_flavor() {
	flavor_spec_file="${dotfiles_dir}/.flavor"


	if [[ -n "$install_flavor" ]]; then
		log "Flavor [$install_flavor] specified on the command line.\n"
		if [[ ! -d "${flavors_dir}/${install_flavor}" ]]; then
			die 1 "Flavor $install_flavor not found."
		fi
	fi

	if [[ -z "$install_flavor" ]]; then
		if [[ -r "$flavor_spec_file" ]]; then
			read -r install_flavor<$flavor_spec_file
			log "Found flavor \"$install_flavor\" in '${flavor_spec_file}'.\n"
			if [[ ! -d "${flavors_dir}/${install_flavor}" ]]; then
				die 1 "Flavor \"$install_flavor\" not found."
			fi
		fi
	fi

	if [[ -z "$install_flavor" ]]; then
		log "Flavor not provided.  Performing detection...\n"
	fi

	# If flavor wasn't specified, try to find by host
	if [[ -z "$install_flavor" ]]; then
		flavor="$(hostname -f)"
		if [[ -d "${flavors_dir}/${flavor}" ]]; then
			log "Auto-detected flavor: \"$flavor\".\n"
			install_flavor="$flavor"
		else
			flavor="$(hostname -s)"
			if [[ -d "${flavors_dir}/${flavor}" ]]; then
				log "Auto-detected flavor: \"$flavor\".\n"
				install_flavor="$flavor"
			fi
		fi
	fi

	# If no host specific flavor, try to find based on OS
	if [[ -z "$install_flavor" ]]; then
		if [[ "$OSTYPE" == "darwin"* ]]; then
			install_flavor="macbook"
			log "Auto-detected flavor: \"$install_flavor\".\n"
		fi
	fi

	# If still no flavor, just bail
	[[ -z "$install_flavor" ]] && die 1 "Unable to determine flavor."

	# We have a flavor.  Save it to the .flavor file for future use
	echo "${install_flavor}" > $flavor_spec_file

	flavor_dir="${flavors_dir}/${install_flavor}"
	if [[ -r "${flavor_dir}/.dotfiles" ]]; then
		log "Initializing flavor \"$install_flavor\" ...\n"
		source "${flavor_dir}/.dotfiles"
		log "Flavor initialization complete.\n"
	fi
}

module() {
	local module="$1"
	log "Adding module: $module\n"
	modules+=($module)
}

process_action() {
	case "$action" in
		install)
			log "\n== Performing install. ==\n\n"
			for module in "${modules[@]}"; do
				local module_dir="$modules_dir/$module"

				log "module_dir: $module_dir\n"

				[[ -d "$module_dir" ]] || die 1 "Invalid module: $module"

				log "Installing module: $module...\n"
				cd "$modules_dir"
				git  submodule update --init --recursive "$module"
				stow --no-folding -t $target_dir -R "$module"
				if [[ -d "${flavors_dir}/${install_flavor}/$module" ]]; then
					log "Adding flavor customizations ...\n"
					cd "${flavors_dir}/${install_flavor}"
					git submodule update --init --recursive "$module"
					stow --no-folding -t $target_dir "$module"
					cd ~-
				fi
				cd ~-
			done
			;;
		uninstall)
			log "\n== Performing uninstall. ==\n\n"
			for module in "${modules[@]}"; do
				local module_dir="$modules_dir/$module"

				[[ -d "$module_dir" ]] || die 1 "Invalid module: $module"

				log "Uninstalling module: $module...\n"
				cd "$modules_dir"
				if [[ -d "${flavors_dir}/${install_flavor}/$module" ]]; then
					log "Removing flavor customizations ...\n"
					cd "${flavors_dir}/${install_flavor}"
					git submodule deinit "$module"
					stow -t $target_dir -D "$module"
					cd ~-
				fi
				stow -t $target_dir -D "$module"
				git submodule deinit "$module"
				cd ~-
			done
			;;
		*)
			printf "Invalid subcommand: %s\n" "$subcommand"
			usage
			exit 1
			;;
	esac
}

if [[ $# -eq 0 ]]; then
	usage
	exit 2
fi

process_args "$@"
initialize_flavor
process_action
